---
interface Props {
  images: Array<{
    src: string;
    'src-thumb': string;
    alt: string;
    title: string;
  }>;
}

const { images } = Astro.props;
---

<div class="not-prose">
  <div class="gallery-stack">
    {images.map((image, index) => (
      <div class="gallery-item" data-index={index}>
        <div class="gallery-image-container">
          <img
            src={image['src-thumb']}
            alt={image.alt}
            title={image.title}
            class="gallery-image gallery-thumb"
            loading="lazy"
          />
          <img
            src={image.src}
            alt={image.alt}
            title={image.title}
            class="gallery-image gallery-full"
            loading="lazy"
          />
        </div>
      </div>
    ))}
  </div>
  
  <!-- Fullscreen modal -->
  <div class="gallery-modal" id="gallery-modal">
    <img id="modal-image" src="" alt="" />
  </div>
</div>

<style>
  .gallery-stack {
    width: 100%;
    margin: 2rem 0;
  }
  
  .gallery-item {
    width: 100%;
    cursor: pointer;
    border-bottom: 1px solid #e5e5e5;
    transition: all 0.5s ease;
    overflow: hidden;
    margin: 0;
    padding: 0;
  }
  
  /* Cursor states */
  .gallery-item:not(.expanded) {
    cursor: pointer; /* Normal click hand for collapsed stripes */
  }
  
  .gallery-item.expanded {
    cursor: zoom-in; /* Zoom in cursor for expanded images */
  }
  
  .gallery-item:last-child {
    border-bottom: none;
  }
  
  .gallery-image-container {
    position: relative;
    height: 80px;
    overflow: hidden;
    transition: height 0.5s ease;
  }
  
  .gallery-image {
    width: 100%;
    height: 400px;
    object-fit: cover;
    object-position: center;
    transition: all 0.5s ease;
    transform: translateY(-160px);
  }
  
  .gallery-thumb {
    filter: brightness(0.7) grayscale(1);
    display: block;
  }
  
  .gallery-full {
    filter: brightness(1) grayscale(0);
    display: none;
  }
  
  
  /* Expanded state - reveal the image by expanding the mask */
  .gallery-item.expanded .gallery-image-container {
    height: auto;
    min-height: 400px;
    max-height: 80vh;
  }
  
  .gallery-item.expanded .gallery-thumb {
    display: none;
  }
  
  .gallery-item.expanded .gallery-full {
    display: block;
    filter: brightness(1) grayscale(0);
    transform: translateY(0);
    height: auto;
    object-fit: contain;
  }
  
  
  .gallery-item:hover .gallery-thumb {
    filter: brightness(0.8) grayscale(1);
  }
  
  .gallery-item.expanded:hover .gallery-full {
    filter: brightness(1) grayscale(0);
  }
  
  /* Fullscreen modal */
  .gallery-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    cursor: pointer;
  }
  
  .gallery-modal.active {
    display: flex;
  }
  
  .gallery-modal {
    cursor: zoom-out; /* Zoom out cursor for entire modal */
  }
  
  .gallery-modal img {
    max-width: 90vw;
    max-height: 90vh;
    object-fit: contain;
    cursor: zoom-out; /* Zoom out cursor when hovering over the image too */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const modal = document.getElementById('gallery-modal');
    const modalImage = document.getElementById('modal-image');
    
    galleryItems.forEach(item => {
      item.addEventListener('click', function() {
        const isExpanded = this.classList.contains('expanded');
        
        if (isExpanded) {
          // If already expanded, open in fullscreen modal
          const fullImage = this.querySelector('.gallery-full');
          modalImage.src = fullImage.src;
          modalImage.alt = fullImage.alt;
          modal.classList.add('active');
        } else {
          // Close all items first
          galleryItems.forEach(otherItem => {
            otherItem.classList.remove('expanded');
          });
          
          // Expand this item
          this.classList.add('expanded');
        }
      });
    });
    
    // Close modal when clicking on it
    modal.addEventListener('click', function() {
      this.classList.remove('active');
    });
    
    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal.classList.contains('active')) {
        modal.classList.remove('active');
      }
    });
  });
</script>
